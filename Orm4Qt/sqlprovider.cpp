#include "sqlprovider.h"
#include <QSqlDatabase>

using namespace Orm4Qt;

/**
 * Constructor with initialization of the database connection name associated with this instance
 * of sql provider.
 * @param connectionName
 * The name of the database connection associated with this provider.
 */
SqlProvider::SqlProvider(const QString &connectionName) :
    m_databaseConnectionName(connectionName)
{}

/**
 * Copy constructor. It copies the database connection associated with the other instance of provider.
 * @param other
 * The instance to be copied.
 */
SqlProvider::SqlProvider(const SqlProvider &other)
{
    int diff = 0;
    while(true)
    {
        QSqlDatabase db = QSqlDatabase::cloneDatabase(QSqlDatabase::database(other.databaseConnectionName(), false),
                                                      QString("%1_%2").arg(other.databaseConnectionName()).arg(diff));
        if(db.isValid())
        {
            m_databaseConnectionName = QString("%1_%2").arg(other.databaseConnectionName()).arg(diff);
            break;
        }
        else
        {
            ++diff;
        }
    }
}

/**
 * Close the database connection associated with this instance of sql provider.
 */
SqlProvider::~SqlProvider()
{
    {
        QSqlDatabase db = QSqlDatabase::database(m_databaseConnectionName, false);
        if(db.isValid())
        {
            if(db.isOpen())
            {
                db.close();
            }
        }
    }
    QSqlDatabase::removeDatabase(m_databaseConnectionName);
}

/**
 * Method for access the database connection name associated with this instance of the provider.
 * @return
 * The name of the connection associated with this instance of provider.
 */
QString SqlProvider::databaseConnectionName() const
{
    return m_databaseConnectionName;
}

/**
 * Method for adjust the database connection name associated with this instance of provider.
 * @param databaseConnectionName
 * The new connection name
 */
void SqlProvider::setDatabaseConnectionName(const QString &databaseConnectionName)
{
    m_databaseConnectionName = databaseConnectionName;
}

/**
 * Method for access the object with the description of the last error generated by this instance of provider.
 * @return
 * The error descriptor.
 */
shared_ptr<OrmError> SqlProvider::lastError() const
{
    return m_lastError;
}

